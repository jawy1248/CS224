00000000: 2369 6e63 6c75 6465 203c 7374 6469 6f2e  #include <stdio.
00000010: 683e 0a23 696e 636c 7564 6520 3c73 7464  h>.#include <std
00000020: 6c69 622e 683e 0a23 696e 636c 7564 6520  lib.h>.#include 
00000030: 3c73 7472 696e 672e 683e 0a0a 2364 6566  <string.h>..#def
00000040: 696e 6520 5452 5545 2031 0a23 6465 6669  ine TRUE 1.#defi
00000050: 6e65 2046 414c 5345 2030 0a23 6465 6669  ne FALSE 0.#defi
00000060: 6e65 2042 4144 5f4e 554d 4245 525f 4152  ne BAD_NUMBER_AR
00000070: 4753 2031 0a0a 2f2a 2a0a 202a 2050 6172  GS 1../**. * Par
00000080: 7365 7320 7468 6520 636f 6d6d 616e 6420  ses the command 
00000090: 6c69 6e65 2e0a 202a 0a20 2a20 6172 6763  line.. *. * argc
000000a0: 3a20 7468 6520 6e75 6d62 6572 206f 6620  : the number of 
000000b0: 6974 656d 7320 6f6e 2074 6865 2063 6f6d  items on the com
000000c0: 6d61 6e64 206c 696e 6520 2861 6e64 206c  mand line (and l
000000d0: 656e 6774 6820 6f66 2074 6865 0a20 2a20  ength of the. * 
000000e0: 2020 2020 2020 6172 6776 2061 7272 6179        argv array
000000f0: 2920 696e 636c 7564 696e 6720 7468 6520  ) including the 
00000100: 6578 6563 7574 6162 6c65 0a20 2a20 6172  executable. * ar
00000110: 6776 3a20 7468 6520 6172 7261 7920 6f66  gv: the array of
00000120: 2061 7267 756d 656e 7473 2061 7320 7374   arguments as st
00000130: 7269 6e67 7320 2863 6861 722a 2061 7272  rings (char* arr
00000140: 6179 290a 202a 2062 6974 733a 2074 6865  ay). * bits: the
00000150: 2069 6e74 6567 6572 2076 616c 7565 2069   integer value i
00000160: 7320 7365 7420 746f 2054 5255 4520 6966  s set to TRUE if
00000170: 2062 6974 7320 6f75 7470 7574 2069 6e64   bits output ind
00000180: 6963 6174 6564 0a20 2a20 2020 2020 2020  icated. *       
00000190: 6f75 7468 6572 7769 7365 2046 414c 5345  outherwise FALSE
000001a0: 2066 6f72 2068 6578 206f 7574 7075 740a   for hex output.
000001b0: 202a 0a20 2a20 7265 7475 726e 7320 7468   *. * returns th
000001c0: 6520 696e 7075 7420 6669 6c65 2070 6f69  e input file poi
000001d0: 6e74 6572 2028 4649 4c45 2a29 0a20 2a2a  nter (FILE*). **
000001e0: 2f0a 4649 4c45 202a 7061 7273 6543 6f6d  /.FILE *parseCom
000001f0: 6d61 6e64 4c69 6e65 2869 6e74 2061 7267  mandLine(int arg
00000200: 632c 2063 6861 7220 2a2a 6172 6776 2c20  c, char **argv, 
00000210: 696e 7420 2a62 6974 7329 207b 0a20 2020  int *bits) {.   
00000220: 2069 6620 2861 7267 6320 3e20 3229 207b   if (argc > 2) {
00000230: 0a20 2020 2020 2020 2070 7269 6e74 6628  .        printf(
00000240: 2255 7361 6765 3a20 2573 205b 2d62 7c2d  "Usage: %s [-b|-
00000250: 6269 7473 5d5c 6e22 2c20 6172 6776 5b30  bits]\n", argv[0
00000260: 5d29 3b0a 2020 2020 2020 2020 6578 6974  ]);.        exit
00000270: 2842 4144 5f4e 554d 4245 525f 4152 4753  (BAD_NUMBER_ARGS
00000280: 293b 0a20 2020 207d 0a0a 2020 2020 6966  );.    }..    if
00000290: 2028 6172 6763 203d 3d20 3220 2626 2028   (argc == 2 && (
000002a0: 7374 7263 6d70 2861 7267 765b 315d 2c20  strcmp(argv[1], 
000002b0: 222d 6222 2920 3d3d 2030 207c 7c20 7374  "-b") == 0 || st
000002c0: 7263 6d70 2861 7267 765b 315d 2c20 222d  rcmp(argv[1], "-
000002d0: 6269 7473 2229 203d 3d20 3029 2920 7b0a  bits") == 0)) {.
000002e0: 2020 2020 2020 2020 2a62 6974 7320 3d20          *bits = 
000002f0: 5452 5545 3b0a 2020 2020 7d20 656c 7365  TRUE;.    } else
00000300: 207b 0a20 2020 2020 2020 202a 6269 7473   {.        *bits
00000310: 203d 2046 414c 5345 3b0a 2020 2020 7d0a   = FALSE;.    }.
00000320: 0a20 2020 2072 6574 7572 6e20 7374 6469  .    return stdi
00000330: 6e3b 0a7d 0a0a 2f2a 2a0a 202a 2057 7269  n;.}../**. * Wri
00000340: 7465 7320 6461 7461 2074 6f20 7374 646f  tes data to stdo
00000350: 7574 2069 6e20 6865 7861 6465 6369 6d61  ut in hexadecima
00000360: 6c2e 0a20 2a0a 202a 2053 6565 206d 7978  l.. *. * See myx
00000370: 7864 2e6d 6420 666f 7220 6465 7461 696c  xd.md for detail
00000380: 732e 0a20 2a0a 202a 2064 6174 613a 2061  s.. *. * data: a
00000390: 6e20 6172 7261 7920 6f66 206e 6f20 6d6f  n array of no mo
000003a0: 7265 2074 6861 6e20 3136 2063 6861 7261  re than 16 chara
000003b0: 6374 6572 730a 202a 2073 697a 653a 2074  cters. * size: t
000003c0: 6865 2073 697a 6520 6f66 2074 6865 2061  he size of the a
000003d0: 7272 6179 0a20 2a2a 2f0a 766f 6964 2070  rray. **/.void p
000003e0: 7269 6e74 4461 7461 4173 4865 7828 756e  rintDataAsHex(un
000003f0: 7369 676e 6564 2063 6861 7220 2a64 6174  signed char *dat
00000400: 612c 2073 697a 655f 7420 7369 7a65 2920  a, size_t size) 
00000410: 7b0a 2020 2020 666f 7220 2869 6e74 2069  {.    for (int i
00000420: 203d 2030 3b20 6920 3c20 3136 3b20 692b   = 0; i < 16; i+
00000430: 2b29 207b 0a20 2020 2020 2020 2069 6620  +) {.        if 
00000440: 2869 203c 2073 697a 6529 207b 0a20 2020  (i < size) {.   
00000450: 2020 2020 2020 2020 2069 6620 2869 203d           if (i =
00000460: 3d20 3029 0a20 2020 2020 2020 2020 2020  = 0).           
00000470: 2020 2020 2070 7269 6e74 6628 2220 2229       printf(" ")
00000480: 3b0a 2020 2020 2020 2020 2020 2020 7072  ;.            pr
00000490: 696e 7466 2822 2530 3278 222c 2064 6174  intf("%02x", dat
000004a0: 615b 695d 293b 0a20 2020 2020 2020 2020  a[i]);.         
000004b0: 2020 2069 6620 2869 2025 2032 203d 3d20     if (i % 2 == 
000004c0: 3129 0a20 2020 2020 2020 2020 2020 2020  1).             
000004d0: 2020 2070 7269 6e74 6628 2220 2229 3b0a     printf(" ");.
000004e0: 2020 2020 2020 2020 7d20 656c 7365 207b          } else {
000004f0: 0a20 2020 2020 2020 2020 2020 2070 7269  .            pri
00000500: 6e74 6628 2220 2022 293b 0a20 2020 2020  ntf("  ");.     
00000510: 2020 2020 2020 2069 6620 2869 2025 2032         if (i % 2
00000520: 203d 3d20 3129 0a20 2020 2020 2020 2020   == 1).         
00000530: 2020 2020 2020 2070 7269 6e74 6628 2220         printf(" 
00000540: 2229 3b0a 2020 2020 2020 2020 7d0a 2020  ");.        }.  
00000550: 2020 7d0a 7d0a 0a2f 2a2a 0a20 2a20 5772    }.}../**. * Wr
00000560: 6974 6573 2064 6174 6120 746f 2073 7464  ites data to std
00000570: 6f75 7420 6173 2063 6861 7261 6374 6572  out as character
00000580: 732e 0a20 2a0a 202a 2053 6565 206d 7978  s.. *. * See myx
00000590: 7864 2e6d 6420 666f 7220 6465 7461 696c  xd.md for detail
000005a0: 732e 0a20 2a0a 202a 2064 6174 613a 2061  s.. *. * data: a
000005b0: 6e20 6172 7261 7920 6f66 206e 6f20 6d6f  n array of no mo
000005c0: 7265 2074 6861 6e20 3136 2063 6861 7261  re than 16 chara
000005d0: 6374 6572 730a 202a 2073 697a 653a 2074  cters. * size: t
000005e0: 6865 2073 697a 6520 6f66 2074 6865 2061  he size of the a
000005f0: 7272 6179 0a20 2a2a 2f0a 766f 6964 2070  rray. **/.void p
00000600: 7269 6e74 4461 7461 4173 4368 6172 7328  rintDataAsChars(
00000610: 756e 7369 676e 6564 2063 6861 7220 2a64  unsigned char *d
00000620: 6174 612c 2073 697a 655f 7420 7369 7a65  ata, size_t size
00000630: 2920 7b0a 2020 2020 666f 7220 2869 6e74  ) {.    for (int
00000640: 2069 203d 2030 3b20 6920 3c20 7369 7a65   i = 0; i < size
00000650: 3b20 692b 2b29 207b 0a20 2020 2020 2020  ; i++) {.       
00000660: 2069 6e74 2074 656d 7020 3d20 6461 7461   int temp = data
00000670: 5b69 5d3b 0a20 2020 2020 2020 2069 6620  [i];.        if 
00000680: 2874 656d 7020 3c20 3332 207c 7c20 7465  (temp < 32 || te
00000690: 6d70 203e 2031 3236 290a 2020 2020 2020  mp > 126).      
000006a0: 2020 2020 2020 7072 696e 7466 2822 2e22        printf("."
000006b0: 293b 0a20 2020 2020 2020 2065 6c73 650a  );.        else.
000006c0: 2020 2020 2020 2020 2020 2020 7072 696e              prin
000006d0: 7466 2822 2563 222c 2064 6174 615b 695d  tf("%c", data[i]
000006e0: 293b 0a20 2020 207d 0a7d 0a0a 766f 6964  );.    }.}..void
000006f0: 2072 6561 6441 6e64 5072 696e 7449 6e70   readAndPrintInp
00000700: 7574 4173 4865 7828 4649 4c45 202a 696e  utAsHex(FILE *in
00000710: 7075 7429 207b 0a20 2020 2075 6e73 6967  put) {.    unsig
00000720: 6e65 6420 6368 6172 2064 6174 615b 3136  ned char data[16
00000730: 5d3b 0a20 2020 2069 6e74 206e 756d 4279  ];.    int numBy
00000740: 7465 7352 6561 6420 3d20 6672 6561 6428  tesRead = fread(
00000750: 6461 7461 2c20 312c 2031 362c 2069 6e70  data, 1, 16, inp
00000760: 7574 293b 0a20 2020 2075 6e73 6967 6e65  ut);.    unsigne
00000770: 6420 696e 7420 6f66 6673 6574 203d 2030  d int offset = 0
00000780: 3b0a 2020 2020 7768 696c 6520 286e 756d  ;.    while (num
00000790: 4279 7465 7352 6561 6420 213d 2030 2920  BytesRead != 0) 
000007a0: 7b0a 2020 2020 2020 2020 7072 696e 7466  {.        printf
000007b0: 2822 2530 3878 3a22 2c20 6f66 6673 6574  ("%08x:", offset
000007c0: 293b 0a20 2020 2020 2020 206f 6666 7365  );.        offse
000007d0: 7420 2b3d 206e 756d 4279 7465 7352 6561  t += numBytesRea
000007e0: 643b 0a20 2020 2020 2020 2070 7269 6e74  d;.        print
000007f0: 4461 7461 4173 4865 7828 6461 7461 2c20  DataAsHex(data, 
00000800: 6e75 6d42 7974 6573 5265 6164 293b 0a20  numBytesRead);. 
00000810: 2020 2020 2020 2070 7269 6e74 6628 2220         printf(" 
00000820: 2229 3b0a 2020 2020 2020 2020 7072 696e  ");.        prin
00000830: 7444 6174 6141 7343 6861 7273 2864 6174  tDataAsChars(dat
00000840: 612c 206e 756d 4279 7465 7352 6561 6429  a, numBytesRead)
00000850: 3b0a 2020 2020 2020 2020 7072 696e 7466  ;.        printf
00000860: 2822 5c6e 2229 3b0a 2020 2020 2020 2020  ("\n");.        
00000870: 6e75 6d42 7974 6573 5265 6164 203d 2066  numBytesRead = f
00000880: 7265 6164 2864 6174 612c 2031 2c20 3136  read(data, 1, 16
00000890: 2c20 696e 7075 7429 3b0a 2020 2020 7d0a  , input);.    }.
000008a0: 7d0a 0a2f 2a2a 0a20 2a20 4269 7473 206f  }../**. * Bits o
000008b0: 7574 7075 7420 666f 7220 7878 642e 0a20  utput for xxd.. 
000008c0: 2a0a 202a 2053 6565 206d 7978 7864 2e6d  *. * See myxxd.m
000008d0: 6420 666f 7220 6465 7461 696c 732e 0a20  d for details.. 
000008e0: 2a0a 202a 2069 6e70 7574 3a20 696e 7075  *. * input: inpu
000008f0: 7420 7374 7265 616d 0a20 2a2a 2f0a 766f  t stream. **/.vo
00000900: 6964 2067 6574 4269 7473 4672 6f6d 4368  id getBitsFromCh
00000910: 6172 2875 6e73 6967 6e65 6420 6368 6172  ar(unsigned char
00000920: 2063 682c 2069 6e74 2062 696e 5b5d 2920   ch, int bin[]) 
00000930: 7b0a 2020 2020 666f 7220 2869 6e74 2069  {.    for (int i
00000940: 203d 2037 3b20 6920 3e3d 2030 3b20 692d   = 7; i >= 0; i-
00000950: 2d29 207b 0a20 2020 2020 2020 2069 6620  -) {.        if 
00000960: 2863 6820 2520 3220 3d3d 2031 290a 2020  (ch % 2 == 1).  
00000970: 2020 2020 2020 2020 2020 6269 6e5b 695d            bin[i]
00000980: 203d 2031 3b0a 2020 2020 2020 2020 656c   = 1;.        el
00000990: 7365 0a20 2020 2020 2020 2020 2020 2062  se.            b
000009a0: 696e 5b69 5d20 3d20 303b 0a0a 2020 2020  in[i] = 0;..    
000009b0: 2020 2020 6368 203d 2063 6820 2f20 323b      ch = ch / 2;
000009c0: 0a20 2020 207d 0a7d 0a0a 766f 6964 2070  .    }.}..void p
000009d0: 7269 6e74 4461 7461 4173 4269 7473 2875  rintDataAsBits(u
000009e0: 6e73 6967 6e65 6420 6368 6172 202a 6461  nsigned char *da
000009f0: 7461 2c20 7369 7a65 5f74 2073 697a 6529  ta, size_t size)
00000a00: 207b 0a20 2020 2069 6e74 2062 696e 5b38   {.    int bin[8
00000a10: 5d3b 0a20 2020 2067 6574 4269 7473 4672  ];.    getBitsFr
00000a20: 6f6d 4368 6172 2864 6174 615b 305d 2c20  omChar(data[0], 
00000a30: 6269 6e29 3b0a 0a20 2020 2066 6f72 2028  bin);..    for (
00000a40: 696e 7420 6920 3d20 303b 2069 203c 2073  int i = 0; i < s
00000a50: 697a 653b 2069 2b2b 2920 7b0a 2020 2020  ize; i++) {.    
00000a60: 2020 2020 6765 7442 6974 7346 726f 6d43      getBitsFromC
00000a70: 6861 7228 6461 7461 5b69 5d2c 2062 696e  har(data[i], bin
00000a80: 293b 0a0a 2020 2020 2020 2020 6966 2028  );..        if (
00000a90: 6920 3d3d 2030 290a 2020 2020 2020 2020  i == 0).        
00000aa0: 2020 2020 7072 696e 7466 2822 2022 293b      printf(" ");
00000ab0: 0a0a 2020 2020 2020 2020 666f 7220 2869  ..        for (i
00000ac0: 6e74 206a 203d 2030 3b20 6a20 3c20 383b  nt j = 0; j < 8;
00000ad0: 206a 2b2b 290a 2020 2020 2020 2020 2020   j++).          
00000ae0: 2020 7072 696e 7466 2822 2564 222c 2062    printf("%d", b
00000af0: 696e 5b6a 5d29 3b0a 0a20 2020 2020 2020  in[j]);..       
00000b00: 2069 6620 2869 2021 3d20 7369 7a65 202d   if (i != size -
00000b10: 2031 290a 2020 2020 2020 2020 2020 2020   1).            
00000b20: 7072 696e 7466 2822 2022 293b 0a20 2020  printf(" ");.   
00000b30: 207d 0a20 2020 2069 6620 2873 697a 6520   }.    if (size 
00000b40: 213d 2036 2920 7b0a 2020 2020 2020 2020  != 6) {.        
00000b50: 666f 7220 2869 6e74 2069 203d 2030 3b20  for (int i = 0; 
00000b60: 6920 3c20 2836 202d 2073 697a 6529 3b20  i < (6 - size); 
00000b70: 692b 2b29 207b 0a20 2020 2020 2020 2020  i++) {.         
00000b80: 2020 2070 7269 6e74 6628 2220 2020 2020     printf("     
00000b90: 2020 2020 2229 3b0a 2020 2020 2020 2020      ");.        
00000ba0: 7d0a 2020 2020 7d0a 7d0a 0a76 6f69 6420  }.    }.}..void 
00000bb0: 7265 6164 416e 6450 7269 6e74 496e 7075  readAndPrintInpu
00000bc0: 7441 7342 6974 7328 4649 4c45 202a 696e  tAsBits(FILE *in
00000bd0: 7075 7429 207b 0a20 2020 2075 6e73 6967  put) {.    unsig
00000be0: 6e65 6420 6368 6172 2064 6174 615b 365d  ned char data[6]
00000bf0: 3b0a 2020 2020 696e 7420 6e75 6d42 7974  ;.    int numByt
00000c00: 6573 5265 6164 203d 2066 7265 6164 2864  esRead = fread(d
00000c10: 6174 612c 2031 2c20 362c 2069 6e70 7574  ata, 1, 6, input
00000c20: 293b 0a20 2020 2075 6e73 6967 6e65 6420  );.    unsigned 
00000c30: 696e 7420 6f66 6673 6574 203d 2030 3b0a  int offset = 0;.
00000c40: 2020 2020 7768 696c 6520 286e 756d 4279      while (numBy
00000c50: 7465 7352 6561 6420 213d 2030 2920 7b0a  tesRead != 0) {.
00000c60: 2020 2020 2020 2020 7072 696e 7466 2822          printf("
00000c70: 2530 3878 3a22 2c20 6f66 6673 6574 293b  %08x:", offset);
00000c80: 0a20 2020 2020 2020 206f 6666 7365 7420  .        offset 
00000c90: 2b3d 206e 756d 4279 7465 7352 6561 643b  += numBytesRead;
00000ca0: 0a20 2020 2020 2020 2070 7269 6e74 4461  .        printDa
00000cb0: 7461 4173 4269 7473 2864 6174 612c 206e  taAsBits(data, n
00000cc0: 756d 4279 7465 7352 6561 6429 3b0a 2020  umBytesRead);.  
00000cd0: 2020 2020 2020 7072 696e 7466 2822 2020        printf("  
00000ce0: 2229 3b0a 2020 2020 2020 2020 7072 696e  ");.        prin
00000cf0: 7444 6174 6141 7343 6861 7273 2864 6174  tDataAsChars(dat
00000d00: 612c 206e 756d 4279 7465 7352 6561 6429  a, numBytesRead)
00000d10: 3b0a 2020 2020 2020 2020 7072 696e 7466  ;.        printf
00000d20: 2822 5c6e 2229 3b0a 2020 2020 2020 2020  ("\n");.        
00000d30: 6e75 6d42 7974 6573 5265 6164 203d 2066  numBytesRead = f
00000d40: 7265 6164 2864 6174 612c 2031 2c20 362c  read(data, 1, 6,
00000d50: 2069 6e70 7574 293b 0a20 2020 207d 0a7d   input);.    }.}
00000d60: 0a0a 696e 7420 6d61 696e 2869 6e74 2061  ..int main(int a
00000d70: 7267 632c 2063 6861 7220 2a2a 6172 6776  rgc, char **argv
00000d80: 2920 7b0a 2020 2020 696e 7420 6269 7473  ) {.    int bits
00000d90: 203d 2046 414c 5345 3b0a 2020 2020 4649   = FALSE;.    FI
00000da0: 4c45 202a 696e 7075 7420 3d20 7061 7273  LE *input = pars
00000db0: 6543 6f6d 6d61 6e64 4c69 6e65 2861 7267  eCommandLine(arg
00000dc0: 632c 2061 7267 762c 2026 6269 7473 293b  c, argv, &bits);
00000dd0: 0a0a 2020 2020 6966 2028 6269 7473 203d  ..    if (bits =
00000de0: 3d20 4641 4c53 4529 207b 0a20 2020 2020  = FALSE) {.     
00000df0: 2020 2072 6561 6441 6e64 5072 696e 7449     readAndPrintI
00000e00: 6e70 7574 4173 4865 7828 696e 7075 7429  nputAsHex(input)
00000e10: 3b0a 2020 2020 7d20 656c 7365 207b 0a20  ;.    } else {. 
00000e20: 2020 2020 2020 2072 6561 6441 6e64 5072         readAndPr
00000e30: 696e 7449 6e70 7574 4173 4269 7473 2869  intInputAsBits(i
00000e40: 6e70 7574 293b 0a20 2020 207d 0a20 2020  nput);.    }.   
00000e50: 2072 6574 7572 6e20 303b 0a7d 0a          return 0;.}.
