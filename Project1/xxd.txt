00000000: 2369 6e63 6c75 6465 203c 7374 6469 6f2e  #include <stdio.
00000010: 683e 0a23 696e 636c 7564 6520 3c73 7464  h>.#include <std
00000020: 6c69 622e 683e 0a23 696e 636c 7564 6520  lib.h>.#include 
00000030: 3c73 7472 696e 672e 683e 0a0a 2364 6566  <string.h>..#def
00000040: 696e 6520 5452 5545 2031 0a23 6465 6669  ine TRUE 1.#defi
00000050: 6e65 2046 414c 5345 2030 0a23 6465 6669  ne FALSE 0.#defi
00000060: 6e65 2042 4144 5f4e 554d 4245 525f 4152  ne BAD_NUMBER_AR
00000070: 4753 2031 0a0a 2f2a 2a0a 202a 2050 6172  GS 1../**. * Par
00000080: 7365 7320 7468 6520 636f 6d6d 616e 6420  ses the command 
00000090: 6c69 6e65 2e0a 202a 0a20 2a20 6172 6763  line.. *. * argc
000000a0: 3a20 7468 6520 6e75 6d62 6572 206f 6620  : the number of 
000000b0: 6974 656d 7320 6f6e 2074 6865 2063 6f6d  items on the com
000000c0: 6d61 6e64 206c 696e 6520 2861 6e64 206c  mand line (and l
000000d0: 656e 6774 6820 6f66 2074 6865 0a20 2a20  ength of the. * 
000000e0: 2020 2020 2020 6172 6776 2061 7272 6179        argv array
000000f0: 2920 696e 636c 7564 696e 6720 7468 6520  ) including the 
00000100: 6578 6563 7574 6162 6c65 0a20 2a20 6172  executable. * ar
00000110: 6776 3a20 7468 6520 6172 7261 7920 6f66  gv: the array of
00000120: 2061 7267 756d 656e 7473 2061 7320 7374   arguments as st
00000130: 7269 6e67 7320 2863 6861 722a 2061 7272  rings (char* arr
00000140: 6179 290a 202a 2062 6974 733a 2074 6865  ay). * bits: the
00000150: 2069 6e74 6567 6572 2076 616c 7565 2069   integer value i
00000160: 7320 7365 7420 746f 2054 5255 4520 6966  s set to TRUE if
00000170: 2062 6974 7320 6f75 7470 7574 2069 6e64   bits output ind
00000180: 6963 6174 6564 0a20 2a20 2020 2020 2020  icated. *       
00000190: 6f75 7468 6572 7769 7365 2046 414c 5345  outherwise FALSE
000001a0: 2066 6f72 2068 6578 206f 7574 7075 740a   for hex output.
000001b0: 202a 0a20 2a20 7265 7475 726e 7320 7468   *. * returns th
000001c0: 6520 696e 7075 7420 6669 6c65 2070 6f69  e input file poi
000001d0: 6e74 6572 2028 4649 4c45 2a29 0a20 2a2a  nter (FILE*). **
000001e0: 2f0a 4649 4c45 202a 7061 7273 6543 6f6d  /.FILE *parseCom
000001f0: 6d61 6e64 4c69 6e65 2869 6e74 2061 7267  mandLine(int arg
00000200: 632c 2063 6861 7220 2a2a 6172 6776 2c20  c, char **argv, 
00000210: 696e 7420 2a62 6974 7329 207b 0a20 2069  int *bits) {.  i
00000220: 6620 2861 7267 6320 3e20 3229 207b 0a20  f (argc > 2) {. 
00000230: 2020 2070 7269 6e74 6628 2255 7361 6765     printf("Usage
00000240: 3a20 2573 205b 2d62 7c2d 6269 7473 5d5c  : %s [-b|-bits]\
00000250: 6e22 2c20 6172 6776 5b30 5d29 3b0a 2020  n", argv[0]);.  
00000260: 2020 6578 6974 2842 4144 5f4e 554d 4245    exit(BAD_NUMBE
00000270: 525f 4152 4753 293b 0a20 207d 0a0a 2020  R_ARGS);.  }..  
00000280: 6966 2028 6172 6763 203d 3d20 3220 2626  if (argc == 2 &&
00000290: 0a20 2020 2020 2028 7374 7263 6d70 2861  .      (strcmp(a
000002a0: 7267 765b 315d 2c20 222d 6222 2920 3d3d  rgv[1], "-b") ==
000002b0: 2030 207c 7c20 7374 7263 6d70 2861 7267   0 || strcmp(arg
000002c0: 765b 315d 2c20 222d 6269 7473 2229 203d  v[1], "-bits") =
000002d0: 3d20 3029 2920 7b0a 2020 2020 2a62 6974  = 0)) {.    *bit
000002e0: 7320 3d20 5452 5545 3b0a 2020 7d20 656c  s = TRUE;.  } el
000002f0: 7365 207b 0a20 2020 202a 6269 7473 203d  se {.    *bits =
00000300: 2046 414c 5345 3b0a 2020 7d0a 0a20 2072   FALSE;.  }..  r
00000310: 6574 7572 6e20 7374 6469 6e3b 0a7d 0a0a  eturn stdin;.}..
00000320: 2f2a 2a0a 202a 2057 7269 7465 7320 6461  /**. * Writes da
00000330: 7461 2074 6f20 7374 646f 7574 2069 6e20  ta to stdout in 
00000340: 6865 7861 6465 6369 6d61 6c2e 0a20 2a0a  hexadecimal.. *.
00000350: 202a 2053 6565 206d 7978 7864 2e6d 6420   * See myxxd.md 
00000360: 666f 7220 6465 7461 696c 732e 0a20 2a0a  for details.. *.
00000370: 202a 2064 6174 613a 2061 6e20 6172 7261   * data: an arra
00000380: 7920 6f66 206e 6f20 6d6f 7265 2074 6861  y of no more tha
00000390: 6e20 3136 2063 6861 7261 6374 6572 730a  n 16 characters.
000003a0: 202a 2073 697a 653a 2074 6865 2073 697a   * size: the siz
000003b0: 6520 6f66 2074 6865 2061 7272 6179 0a20  e of the array. 
000003c0: 2a2a 2f0a 766f 6964 2070 7269 6e74 4461  **/.void printDa
000003d0: 7461 4173 4865 7828 756e 7369 676e 6564  taAsHex(unsigned
000003e0: 2063 6861 7220 2a64 6174 612c 2073 697a   char *data, siz
000003f0: 655f 7420 7369 7a65 2920 7b0a 2020 7072  e_t size) {.  pr
00000400: 696e 7466 2822 544f 444f 2031 3a20 7072  intf("TODO 1: pr
00000410: 696e 7444 6174 6141 7348 6578 2028 3229  intDataAsHex (2)
00000420: 2229 3b0a 7d0a 0a2f 2a2a 0a20 2a20 5772  ");.}../**. * Wr
00000430: 6974 6573 2064 6174 6120 746f 2073 7464  ites data to std
00000440: 6f75 7420 6173 2063 6861 7261 6374 6572  out as character
00000450: 732e 0a20 2a0a 202a 2053 6565 206d 7978  s.. *. * See myx
00000460: 7864 2e6d 6420 666f 7220 6465 7461 696c  xd.md for detail
00000470: 732e 0a20 2a0a 202a 2064 6174 613a 2061  s.. *. * data: a
00000480: 6e20 6172 7261 7920 6f66 206e 6f20 6d6f  n array of no mo
00000490: 7265 2074 6861 6e20 3136 2063 6861 7261  re than 16 chara
000004a0: 6374 6572 730a 202a 2073 697a 653a 2074  cters. * size: t
000004b0: 6865 2073 697a 6520 6f66 2074 6865 2061  he size of the a
000004c0: 7272 6179 0a20 2a2a 2f0a 766f 6964 2070  rray. **/.void p
000004d0: 7269 6e74 4461 7461 4173 4368 6172 7328  rintDataAsChars(
000004e0: 756e 7369 676e 6564 2063 6861 7220 2a64  unsigned char *d
000004f0: 6174 612c 2073 697a 655f 7420 7369 7a65  ata, size_t size
00000500: 2920 7b0a 2020 7072 696e 7466 2822 544f  ) {.  printf("TO
00000510: 444f 2032 3a20 7072 696e 7444 6174 6141  DO 2: printDataA
00000520: 7343 6861 7273 2028 3329 2229 3b0a 7d0a  sChars (3)");.}.
00000530: 0a76 6f69 6420 7265 6164 416e 6450 7269  .void readAndPri
00000540: 6e74 496e 7075 7441 7348 6578 2846 494c  ntInputAsHex(FIL
00000550: 4520 2a69 6e70 7574 2920 7b0a 2020 756e  E *input) {.  un
00000560: 7369 676e 6564 2063 6861 7220 6461 7461  signed char data
00000570: 5b31 365d 3b0a 2020 696e 7420 6e75 6d42  [16];.  int numB
00000580: 7974 6573 5265 6164 203d 2066 7265 6164  ytesRead = fread
00000590: 2864 6174 612c 2031 2c20 3136 2c20 696e  (data, 1, 16, in
000005a0: 7075 7429 3b0a 2020 756e 7369 676e 6564  put);.  unsigned
000005b0: 2069 6e74 206f 6666 7365 7420 3d20 303b   int offset = 0;
000005c0: 0a20 2077 6869 6c65 2028 6e75 6d42 7974  .  while (numByt
000005d0: 6573 5265 6164 2021 3d20 3029 207b 0a20  esRead != 0) {. 
000005e0: 2020 2070 7269 6e74 6628 2225 3038 783a     printf("%08x:
000005f0: 222c 206f 6666 7365 7429 3b0a 2020 2020  ", offset);.    
00000600: 6f66 6673 6574 202b 3d20 6e75 6d42 7974  offset += numByt
00000610: 6573 5265 6164 3b0a 2020 2020 7072 696e  esRead;.    prin
00000620: 7444 6174 6141 7348 6578 2864 6174 612c  tDataAsHex(data,
00000630: 206e 756d 4279 7465 7352 6561 6429 3b0a   numBytesRead);.
00000640: 2020 2020 7072 696e 7466 2822 2020 2229      printf("  ")
00000650: 3b0a 2020 2020 7072 696e 7444 6174 6141  ;.    printDataA
00000660: 7343 6861 7273 2864 6174 612c 206e 756d  sChars(data, num
00000670: 4279 7465 7352 6561 6429 3b0a 2020 2020  BytesRead);.    
00000680: 7072 696e 7466 2822 5c6e 2229 3b0a 2020  printf("\n");.  
00000690: 2020 6e75 6d42 7974 6573 5265 6164 203d    numBytesRead =
000006a0: 2066 7265 6164 2864 6174 612c 2031 2c20   fread(data, 1, 
000006b0: 3136 2c20 696e 7075 7429 3b0a 2020 7d0a  16, input);.  }.
000006c0: 7d0a 0a2f 2a2a 0a20 2a20 4269 7473 206f  }../**. * Bits o
000006d0: 7574 7075 7420 666f 7220 7878 642e 0a20  utput for xxd.. 
000006e0: 2a0a 202a 2053 6565 206d 7978 7864 2e6d  *. * See myxxd.m
000006f0: 6420 666f 7220 6465 7461 696c 732e 0a20  d for details.. 
00000700: 2a0a 202a 2069 6e70 7574 3a20 696e 7075  *. * input: inpu
00000710: 7420 7374 7265 616d 0a20 2a2a 2f0a 766f  t stream. **/.vo
00000720: 6964 2072 6561 6441 6e64 5072 696e 7449  id readAndPrintI
00000730: 6e70 7574 4173 4269 7473 2846 494c 4520  nputAsBits(FILE 
00000740: 2a69 6e70 7574 2920 7b0a 2020 7072 696e  *input) {.  prin
00000750: 7466 2822 544f 444f 2033 3a20 7265 6164  tf("TODO 3: read
00000760: 416e 6450 7269 6e74 496e 7075 7441 7342  AndPrintInputAsB
00000770: 6974 735c 6e22 293b 0a7d 0a0a 696e 7420  its\n");.}..int 
00000780: 6d61 696e 2869 6e74 2061 7267 632c 2063  main(int argc, c
00000790: 6861 7220 2a2a 6172 6776 2920 7b0a 2020  har **argv) {.  
000007a0: 696e 7420 6269 7473 203d 2046 414c 5345  int bits = FALSE
000007b0: 3b0a 2020 4649 4c45 202a 696e 7075 7420  ;.  FILE *input 
000007c0: 3d20 7061 7273 6543 6f6d 6d61 6e64 4c69  = parseCommandLi
000007d0: 6e65 2861 7267 632c 2061 7267 762c 2026  ne(argc, argv, &
000007e0: 6269 7473 293b 0a0a 2020 6966 2028 6269  bits);..  if (bi
000007f0: 7473 203d 3d20 4641 4c53 4529 207b 0a20  ts == FALSE) {. 
00000800: 2020 2072 6561 6441 6e64 5072 696e 7449     readAndPrintI
00000810: 6e70 7574 4173 4865 7828 696e 7075 7429  nputAsHex(input)
00000820: 3b0a 2020 7d20 656c 7365 207b 0a20 2020  ;.  } else {.   
00000830: 2072 6561 6441 6e64 5072 696e 7449 6e70   readAndPrintInp
00000840: 7574 4173 4269 7473 2869 6e70 7574 293b  utAsBits(input);
00000850: 0a20 207d 0a20 2072 6574 7572 6e20 303b  .  }.  return 0;
00000860: 0a7d 0a                                  .}.
